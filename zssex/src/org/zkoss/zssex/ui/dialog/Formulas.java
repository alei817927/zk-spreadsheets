//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package org.zkoss.zssex.ui.dialog;

import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import org.zkoss.zssex.ui.dialog.FormulaMetaInfo;

public class Formulas {
    private static final String FINANCIAL = "Financial";
    private static final String DATE_TIME = "Date & Time";
    private static final String MATH_TRIG = "Math & Trig";
    private static final String STATISTICAL = "Statistical";
    private static final String LOOKUP_REF = "Lookup & Reference";
    private static final String TEXT = "Text";
    private static final String LOGICAL = "Logical";
    private static final String INFOMATION = "Information";
    private static final String ENGINEERING = "Engineering";
    static LinkedHashMap<String, List<FormulaMetaInfo>> formulaInfos = new LinkedHashMap();

    public Formulas() {
    }

    public static LinkedHashMap<String, List<FormulaMetaInfo>> getFormulaInfos() {
        return formulaInfos;
    }

    static {
        LinkedList financeAry = new LinkedList();
        formulaInfos.put("Financial", financeAry);
        financeAry.add(new FormulaMetaInfo("Financial", "ACCRINT", "ACCRINT(issue, first_interest, settlement, rate, par, frequency, basis, calc_method)", "Returns the accrued interest for a security that pays periodic interest.", 8, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "ACCRINTM", "ACCRINTM(issue, settlement, rate, par, basis)", "Returns the accrued interest for a security that pays interest at maturity,", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "AMORDEGRC", "AMORDEGRC(cost, date_purchased, first_period, salvage, period, rate, basis)", "Returns the prorated linear depreciation of an asset for each accounting period.", 7, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "AMORLINC", "AMORLINC(cost, date_purchased, first_period, salvage, period, rate, basis)", "Returns the prorated linear depreciation of an asset for each accounting period.", 7, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "COUPDAYBS", "COUPDAYBS(settlement, maturity, frequency, basis)", "Returns the number of days from the beginning of the coupon eriod to the settlement date.", 3, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "COUPDAYS", "COUPDAYS(settlement, maturity, frequency, basis)", "Returns the number of days in the coupon period that contains the settlement date.", 4, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "COUPDAYSNC", "COUPDAYSNC(settlement, maturity, frequency, basis)", "Returns the number of days from the settlement date to the next coupon date.", 4, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "COUPNCD", "COUPNCD(settlement, maturity, frequency, basis)", "Returns the next coupon date after the settlement date.", 4, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "COUPNUM", "COUPNUM(settlement, maturity, frequency, basis)", "Returns the number of coupons payable between the settlement date and maturity date.", 4, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "COUPPCD", "COUPPCD(settlement, maturity, frequency, basis)", "Returns the previous coupon date before the settlement date.", 4, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "CUMIPMT", "CUMIPMT(rate, nper, pv, start_period, end_period, type)", "Returns the cumulative interest paid between two periods.", 6, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "CUMPRINC", "CUMPRINC(rate, nper, pv, start_period, end_period, type)", "Returns the cumulative principal paid on a load between two periods.", 6, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "DB", "DB(cost, salvage, life, period, month)", "Returns the depreciation of an asset for a specified period using the fixed-declining balance method", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "DDB", "DDB(cost salvage, life, period, factor)", "Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method you specify.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "DISC", "DISC(settlement, maturity, pr, redemption, basis)", "Returns the discount rate for a security", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "DOLLARDE", "DOLLARDE(fractional_dollar, fraction)", "Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number", 2, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "DOLLARFR", "DOLLARFR(decimal_dollar, fraction)", "Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction", 2, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "DURATION", "DURATION(settlement, maturity, coupon, yld, frequency, basis)", "Returnsthe annual duration of a security with periodic interest payments.", 6, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "EFFECT", "EFFECT(nominal_rate, npery)", "Returns the effective annual interest rate.", 2, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "FV", "FV(rate, nper, pmt, pv, type)", "Returns the future value of an investment based on periodic, constant payments and a constant interset rate.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "FVSCHEDULE", "FVSCHEDULE(principal, sehedule)", "Returns the future value of an initial principal after applying a series of compound interest rates.", 2, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "INTRATE", "INTRATE(settlement, maturity, investment, redemption, basis)", "Returns the interest rate for a fully invested security.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "IPMT", "IPMT(rate, per, nper, pv, fv, type)", "Returns the interest payment for a given period for an investment, based on periodic, constant payments and a constant interest rate.", 6, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "IRR", "IRR(values, guess)", "Returns the internal rate of return for a series of cash flows.", 2, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "NOMINAL", "NOMINAL(effect_rate, npery)", "Returns the nominal annual interest rate, given the effective rate and the number of compounding periods per year.", 2, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "NPER", "NPER(rate, pmt, pv, fv, type)", "Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "NPV", "NPV(rate, value1, value2,...)", "Returns the net present value of an investment based on a discount rate and a series of future payments (negative values) and income (positive values).", 3, "value"));
        financeAry.add(new FormulaMetaInfo("Financial", "PMT", "PMT(rate, nper, pv, fv, type)", "Calculates the payment for a loan based on constant payments and a constant interest rate.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "PPMT", "PPMT(rate, per, nper, pv, fv, type)", "Returns the payment on the principal for a given investment based on periodic, constant payments and a constant interest rate.", 6, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "PRICE", "PRICE(settlement, maturity, rate, yld, redemption, frequency, basis)", "Returns the price per $100 face value of a security that pays periodic interest.", 7, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "PRICEDISC", "PRICEDISC(settlement, maturity, discount, redemption, basis)", "Returns the price per $100 face value of a discounted security.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "PRICEMAT", "PRICEMAT(settlement, maturity, issue, rate, yld, basis)", "Returns the price per $100 face value of a security that pays interest at maturity.", 6, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "PV", "PV(rate, nper, pmt, fv, type)", "Returns the present value of an investment: the total amount that a series of future payments is worth now.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "RATE", "RATE(nper, pmt, pv, fv, type, guess)", "Returns the interest rate per period of a loan or an investment.For example, use 6%/4 for quartely payments at 6% APR.", 6, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "RECEIVED", "RECEIVED(settlement, maturity, investment, discount, basis)", "Returns the amount received at maturity for a fully invested security.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "SLN", "SLN(cost, salvage, life)", "Returns the straight-line depreciation of an asset for one period.", 3, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "SYD", "SYD(cost, salvage, life, per)", "Returns the sum-of years\' digits depreciation of an asset for a specfied period.", 4, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "TBILLEQ", "TBILLEQ(settlement, maturity, discount)", "Returns the bond-equivalent yield for a treasury bill.", 3, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "TBILLYIELD", "TBILLYIELD(settlement, maturity ,pr)", "Returns the yield for a treasury bill", 3, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "XNPV", "XNPV(rate, values, dates)", "Returns the net present value for a schedule of case flows.", 3, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "YIELD", "YIELD(settlement, maturity, rate, pr, redemption, frequency, basus)", "Returns the yield on a security that pays periodic interest.", 7, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "YIELDDISC", "YIELDDISC(settlement, maturity, pr, redemption, basis)", "Returns the annual yield for a discounted security. For example, a treasury bill.", 5, (String)null));
        financeAry.add(new FormulaMetaInfo("Financial", "YIELDMAT", "YIELDMAT(settlement, maturity, issue, rate, pr, basis)", "Returns the annual yield of a security that pays interest at maturity", 6, (String)null));
        LinkedList statAry = new LinkedList();
        formulaInfos.put("Statistical", statAry);
        statAry.add(new FormulaMetaInfo("Statistical", "AVEDEV", "AVEDEV(number1, number2,...)", "Returns the average of the absolute deviations of data points from their mean. AVEDEV is a measure of the variability in a data set.", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "AVERAGE", "AVERAGE(number1, number2,...)", "Returns the average of its arguments", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "AVERAGEA", "AVERAGEA(value1, value2,...)", "Returns the average of its arguments, including numbers, text, and logical values", 2, "value"));
        statAry.add(new FormulaMetaInfo("Statistical", "BINOMDIST", "BINOMDIST(number_s, trials, probability_s, cumulative)", "Returns the individual term binomial distribution probability", 4, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "CHIDIST", "CHIDIST(x, degrees_freedom)", "Returns the one-tailed probability of the chi-squared distribution", 2, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "CHIINV", "CHIINV(probability, degrees_freedom)", "Returns the inverse of the one-tailed probability of the chi-squared distribution", 2, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "COUNT", "COUNT(value1, value2,...)", "Counts how many numbers are in the list of arguments", 1, "value"));
        statAry.add(new FormulaMetaInfo("Statistical", "COUNTA", "COUNTA(value1, value2, ...)", "Counts how many values are in the list of arguments", 1, "value"));
        statAry.add(new FormulaMetaInfo("Statistical", "EXPONDIST", "EXPONDIST(x, lambda, cumulative)", "Returns the exponential distribution", 3, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "FDIST", "FDIST(x, degrees_freedom1, degrees_freedom2)", "Returns the F probability distribution", 3, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "FINV", "FINV(probability, degrees_freedom1, degrees_freedom2)", "Returns the inverse of the F probability distribution", 3, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "GAMMADIST", "GAMMADIST(x, alpha, beta, cumulative)", "Returns the gamma distribution", 4, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "GAMMAINV", "GAMMAINV(probability, alpha, beta)", "Returns the inverse of the gamma cumulative distribution", 3, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "GAMMALN", "GAMMALN(x)", "Returns the natural logarithm of the gamma function", 1, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "GEOMEAN", "GEOMEAN(number1, number2,...)", "Returns the geometric mean", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "HYPGEOMDIST", "HYPGEOMDIST(sample_s, number_sample, population_s, number_population)", "Returns the hypergeometric distribution", 4, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "KURT", "KURT(number1, number2,...)", "Returns the kurtosis of a data set", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "MAX", "MAX(number1, number2,...)", "Returns the maximum value in a list of arguments", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "MIN", "MIN(number1, number2,...)", "Returns the minimum value in a list of arguments", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "NORMDIST", "NORMDIST(x, mean, standard_dev, cumulative)", "Returns the normal cumulative distribution", 4, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "POISSON", "POISSON(x, mean, cumulative)", "Returns the Poisson distribution", 3, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "SKEW", "SKEW(number1, number2,...)", "Returns the skewness of a distribution", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "SLOPE", "SLOPE(known_y\'s, known_x\'s)", "Returns the slope of the linear regression line", 2, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "STDEV", "STDEV(number1, number2,...)", "Estimates standard deviation based on a sample", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "TDIST", "TDIST(x, degrees_freedom, tails)", "Returns the Student\'s t-distribution", 3, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "TINV", "TINV(probability, degrees_freedom)", "Returns the inverse of the Student\'s t-distribution", 2, (String)null));
        statAry.add(new FormulaMetaInfo("Statistical", "VAR", "VAR(number1, number2,...)", "Estimates variance based on a sample", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "VARP", "VARP(number1, number2,...)", "Calculates variance based on the entire population", 2, "number"));
        statAry.add(new FormulaMetaInfo("Statistical", "WEIBULL", "WEIBULL(x, alpha, beta, cumulative)", "Returns the Weibull distribution", 4, (String)null));
        LinkedList lookupAndRefAry = new LinkedList();
        formulaInfos.put("Lookup & Reference", lookupAndRefAry);
        lookupAndRefAry.add(new FormulaMetaInfo("Lookup & Reference", "HLOOKUP", "HLOOKUP(lookup_value, table_array, row_index_num, range_lookup)", "Searches for a value in the top row of a table or an array of values, and then returns a value in the same column from a row you specify in the table or array.", 4, (String)null));
        lookupAndRefAry.add(new FormulaMetaInfo("Lookup & Reference", "VLOOKUP", "VLOOKUP(lookup_value, table_array, col_index_num, range_lookup)", "Searches for a value in the first column of a table array and returns a value in the same row from another column in the table array.", 4, (String)null));
        LinkedList mathAry = new LinkedList();
        formulaInfos.put("Math & Trig", mathAry);
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ABS", "ABS(number)", "Returns the absolute value of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ACOS", "ACOS(number)", "Returns the arccosine of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ACOSH", "ACOSH(number)", "Returns the inverse hyperbolic cosine of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ASIN", "ASIN(number)", "Returns the arcsine of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ASINH", "ASINH(number)", "Returns the inverse hyperbolic sine of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ATAN", "ATAN(number)", "Returns the arctangent of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ATAN2", "ATAN2(x_num, y_num)", "Returns the arctangent from x- and y-coordinates", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ATANH", "ATANH(number)", "Returns the inverse hyperbolic tangent of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "CEILING", "CEILING(number, significance)", "Rounds a number to the nearest integer or to the nearest multiple of significance", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "COMBIN", "COMBIN(number, number_chosen)", "Returns the number of combinations for a given number of objects", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "COS", "COS(number)", "Returns the cosine of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "COSH", "COSH(number)", "Returns the hyperbolic cosine of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "DEGREES", "DEGREES(angle)", "Converts radians to degrees", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "EVEN", "EVEN(number)", "Rounds a number up to the nearest even integer", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "EXP", "EXP(number)", "Returns e raised to the power of a given number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "FACT", "FACT(number)", "Returns the factorial of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "FACTDOUBLE", "FACTDOUBLE(number)", "Returns the double factorial of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "FLOOR", "FLOOR(number, significance)", "Rounds a number down, toward zero", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "GCD", "GCD(number1, number2, ...)", "Returns the greatest common divisor", 2, "number"));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "INT", "INT(number)", "Rounds a number down to the nearest integer", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "LCM", "LCM(number1, number2, ...)", "Returns the least common multiple", 2, "number"));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "LN", "LN(number)", "Returns the natural logarithm of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "LOG", "LOG(number, base)", "Returns the logarithm of a number to a specified base", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "LOG10", "LOG10(number)", "Returns the base-10 logarithm of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "MDETERM", "MDETERM(array)", "Returns the matrix determinant of an array", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "MINVERSE", "MINVERSE(array)", "Returns the matrix inverse of an array", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "MMULT", "MMULT(array1, array2)", "Returns the matrix product of two arrays", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "MOD", "MOD(number, divisor)", "Returns the remainder from division", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "MROUND", "MROUND(number, multiple)", "Returns a number rounded to the desired multiple", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "MULTINOMIAL", "MULTINOMIAL(number1, number2, ...)", "Returns the multinomial of a set of numbers", 2, "number"));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ODD", "ODD(number)", "Rounds a number up to the nearest odd integer", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "PI", "PI( )", "Returns the value of pi", 0, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "POWER", "POWER(number, power)", "Returns the result of a number raised to a power", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "PRODUCT", "PRODUCT(number1, number2, ...)", "Multiplies its arguments", 1, "number"));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "QUOTIENT", "QUOTIENT(numerator, denominator)", "Returns the integer portion of a division", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "RADIANS", "RADIANS(angle)", "Converts degrees to radians", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "RAND", "RAND( )", "Returns a random number between 0 and 1", 0, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "RANDBETWEEN", "RANDBETWEEN(bottom, top)", "Returns a random number between the numbers you specify", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ROMAN", "ROMAN(number, form)", "Converts an arabic numeral to roman, as text", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ROUND", "ROUND(number, num_digits)", "Rounds a number to a specified number of digits", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ROUNDDOWN", "ROUNDDOWN(number, num_digits)", "Rounds a number down, toward zero", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "ROUNDUP", "ROUNDUP(number,num_digits)", "Rounds a number up, away from zero", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SIGN", "SIGN(number)", "Returns the sign of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SIN", "SIN(number)", "Returns the sine of the given angle", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SINH", "SINH(number)", "Returns the hyperbolic sine of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SQRT", "SQRT(number)", "Returns a positive square root", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SQRTPI", "SQRTPI(number)", "Returns the square root of (number * pi)", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SUBTOTAL", "SUBTOTAL(function_num, ref1, ref2, ...)", "Returns a subtotal in a list or database", 3, "ref"));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SUM", "SUM(number1, number2, number3, ...)", "Adds its arguments", 2, "number"));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SUMIF", "SUMIF(range, criteria, sum_range)", "Adds the cells specified by a given criteria", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SUMPRODUCT", "SUMPRODUCT(array1, array2, array3, ...)", "Returns the sum of the products of corresponding array components", 3, "array"));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SUMSQ", "SUMSQ(number1, number2, ...)", "Returns the sum of the squares of the arguments", 2, "number"));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SUMX2MY2", "SUMX2MY2(array_x, array_y)", "Returns the sum of the difference of squares of corresponding values in two arrays", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SUMX2PY2", "SUMX2PY2(array_x, array_y)", "Returns the sum of the sum of squares of corresponding values in two arrays", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "SUMXMY2", "SUMXMY2(array_x, array_y)", "Returns the sum of squares of differences of corresponding values in two arrays", 2, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "TAN", "TAN(number)", "Returns the tangent of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "TANH", "TANH(number)", "Returns the hyperbolic tangent of a number", 1, (String)null));
        mathAry.add(new FormulaMetaInfo("Math & Trig", "TRUNC", "TRUNC(number, num_digits)", "Truncates a number to an integer", 2, (String)null));
        LinkedList dateAry = new LinkedList();
        formulaInfos.put("Date & Time", dateAry);
        dateAry.add(new FormulaMetaInfo("Date & Time", "DATE", "DATE(year, month, day)", "Returns the serial number of a particular date", 3, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "DATEVALUE", "DATEVALUE(date_text)", "Converts a date in the form of text to a serial number", 1, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "DAY", "DAY(serial_number)", "Converts a serial number to a day of the month", 1, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "DAYS360", "DAYS360(start_date, end_date, method)", "Calculates the number of days between two dates based on a 360-day year", 2, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "HOUR", "HOUR(serial_number)", "Converts a serial number to an hour", 1, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "MINUTE", "MINUTE(serial_number)", "Converts a serial number to a minute", 1, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "MONTH", "MONTH(serial_number)", "Converts a serial number to a month", 1, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "NOW", "NOW()", "Returns the serial number of the current date and time", 0, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "SECOND", "SECOND(serial_number)", "Converts a serial number to a second", 1, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "TIME", "TIME(hour, minute, second)", "Returns the serial number of a particular time", 3, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "TODAY", "TODAY( )", "Returns the serial number of today\'s date", 0, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "WEEKDAY", "WEEKDAY(serial_number, return_type)", "Converts a serial number to a day of the week", 2, (String)null));
        dateAry.add(new FormulaMetaInfo("Date & Time", "YEAR", "YEAR(serial_number)", "Converts a serial number to a year", 1, (String)null));
        LinkedList textAry = new LinkedList();
        formulaInfos.put("Text", textAry);
        textAry.add(new FormulaMetaInfo("Text", "CHAR", "CHAR(number)", "Returns the character specified by the code number", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "CLEAN", "CLEAN(text)", "Removes all nonprintable characters from text", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "CODE", "CODE(text)", "Returns a numeric code for the first character in a text string", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "CONCATENATE", "CONCATENATE(text1, text2, ...)", "Joins several text items into one text item", 1, "text"));
        textAry.add(new FormulaMetaInfo("Text", "DOLLAR", "DOLLAR(number, decimals)", "Converts a number to text, using the $ (dollar) currency format", 2, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "EXACT", "EXACT(text1, text2)", "Checks to see if two text values are identical", 2, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "FIND", "FIND(find_text, within_text, start_num)", "Finds one text value within another (case-sensitive)", 3, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "FINDB", "FINDB(find_text, within_text, start_num)", "Finds one text value within another (case-sensitive)", 3, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "FIXED", "FIXED(number, decimals, no_commas)", "Formats a number as text with a fixed number of decimals", 3, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "LEFT", "LEFT(text, num_chars)", "Returns the leftmost characters from a text value", 2, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "LEN", "LEN(text)", "Returns the number of characters in a text string", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "LOWER", "LOWER(text)", "Converts text to lowercase", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "MID", "MID(text, start_num, num_chars)", "Returns a specific number of characters from a text string starting at the position you specify", 3, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "PROPER", "PROPER(text)", "Capitalizes the first letter in each word of a text value", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "REPLACE", "REPLACE(old_text, start_num, num_chars, new_text)", "Replaces characters within text", 4, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "REPT", "REPT(text, number_times)", "Repeats text a given number of times", 2, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "RIGHT", "RIGHT(text, num_chars)", "Returns the rightmost characters from a text value", 2, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "SEARCH", "SEARCH(find_text, within_text, [start_num])", "Finds one text value within another (not case-sensitive)", 3, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "SUBSTITUTE", "SUBSTITUTE(text, old_text, new_text, instance_num)", "Substitutes new text for old text in a text string", 4, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "T", "T(value)", "Converts its arguments to text", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "TEXT", "TEXT(value, format_text)", "Formats a number and converts it to text", 2, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "TRIM", "TRIM(text)", "Removes spaces from text", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "UPPER", "UPPER(text)", "Converts text to uppercase", 1, (String)null));
        textAry.add(new FormulaMetaInfo("Text", "VALUE", "VALUE(text)", "Converts a text argument to a number", 1, (String)null));
        LinkedList logAry = new LinkedList();
        formulaInfos.put("Logical", logAry);
        logAry.add(new FormulaMetaInfo("Logical", "AND", "AND(logical1, logical2, ...)", "Returns TRUE if all of its arguments are TRUE", 2, "logical"));
        logAry.add(new FormulaMetaInfo("Logical", "FALSE", "FALSE( )", "Returns the logical value FALSE", 0, (String)null));
        logAry.add(new FormulaMetaInfo("Logical", "IF", "IF(logical_test, value_if_true, [value_if_false])", "Specifies a logical test to perform", 3, (String)null));
        logAry.add(new FormulaMetaInfo("Logical", "NOT", "NOT(logical)", "Reverses the logic of its argument", 1, (String)null));
        logAry.add(new FormulaMetaInfo("Logical", "OR", "OR(logical1, logical2,...)", "Returns TRUE if any argument is TRUE", 2, "logical"));
        logAry.add(new FormulaMetaInfo("Logical", "TRUE", "TRUE( )", "Returns the logical value TRUE", 0, (String)null));
        LinkedList infoAry = new LinkedList();
        formulaInfos.put("Information", infoAry);
        infoAry.add(new FormulaMetaInfo("Information", "ISBLANK", "ISBLANK(value)", "Returns TRUE if the value is blank", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISLOGICAL", "ISLOGICAL(value)", "Returns TRUE if the value is a logical value", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISEVEN", "ISEVEN(number)", "Returns TRUE if the number is even", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISODD", "ISODD(number)", "Returns TRUE if the number is odd", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "N", "N(value)", "Returns a value converted to a number", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "NA", "NA( )", "Returns the error value #N/A", 0, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISNUMBER", "ISNUMBER(value)", "Returns TRUE if the value is a number", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISTEXT", "ISTEXT(value)", "Returns TRUE if the value is text", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISNONTEXT", "ISNONTEXT(value)", "Returns TRUE if the value is not text", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISERR", "ISERR(value)", "Returns TRUE if the value is any error value except #N/A", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISERROR", "ISERROR(value)", "Returns TRUE if the value is any error value", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ISNA", "ISNA(value)", "Returns TRUE if the value is the #N/A error value", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "TYPE", "TYPE(value)", "Returns a number indicating the data type of a value", 1, (String)null));
        infoAry.add(new FormulaMetaInfo("Information", "ERROR.TYPE", "ERROR.TYPE(error_val)", "Returns a number corresponding to an error type", 1, (String)null));
        LinkedList engAry = new LinkedList();
        formulaInfos.put("Engineering", engAry);
        engAry.add(new FormulaMetaInfo("Engineering", "BESSELI", "BESSELI(x, n)", "Returns the modified Bessel function In(x)", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "BESSELJ", "BESSELJ(x, n)", "Returns the Bessel function Jn(x)", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "BESSELK", "BESSELK(x, n)", "Returns the modified Bessel function Kn(x)", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "BESSELY", "BESSELY(x, n)", "Returns the Bessel function Yn(x)", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "BIN2DEC", "BIN2DEC(number)", "Converts a binary number to decimal", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "BIN2HEX", "BIN2HEX(number, places)", "Converts a binary number to hexadecimal", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "BIN2OCT", "BIN2OCT(number, places)", "Converts a binary number to octal", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "COMPLEX", "COMPLEX(real_num, i_num, suffix)", "Converts real and imaginary coefficients into a complex number", 3, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "DEC2BIN", "DEC2BIN(number, places)", "Converts a decimal number to binary", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "DEC2HEX", "DEC2HEX(number, places)", "Converts a decimal number to hexadecimal", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "DEC2OCT", "DEC2OCT(number, places)", "Converts a decimal number to octal", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "DELTA", "DELTA(number1, number2)", "Tests whether two values are equal", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "ERF", "ERF(lower_limit, upper_limit)", "Returns the error function", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "ERFC", "ERFC(x)", "Returns the complementary error function", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "GESTEP", "GESTEP(number, step)", "Tests whether a number is greater than a threshold value", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "HEX2BIN", "HEX2BIN(number, places)", "Converts a hexadecimal number to binary", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "HEX2DEC", "HEX2DEC(number)", "Converts a hexadecimal number to decimal", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "HEX2OCT", "HEX2OCT(number, places)", "Converts a hexadecimal number to octal", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMABS", "IMABS(inumber)", "Returns the absolute value (modulus) of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMAGINARY", "IMAGINARY(inumber)", "Returns the imaginary coefficient of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMARGUMENT", "IMARGUMENT(inumber)", "Returns the argument theta, an angle expressed in radians", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMCONJUGATE", "IMCONJUGATE(inumber)", "Returns the complex conjugate of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMCOS", "IMCOS(inumber)", "Returns the cosine of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMDIV", "IMDIV(inumber1, inumber2)", "Returns the quotient of two complex numbers", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMEXP", "IMEXP(inumber)", "Returns the exponential of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMLN", "IMLN(inumber)", "Returns the natural logarithm of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMLOG10", "IMLOG10(inumber)", "Returns the base-10 logarithm of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMLOG2", "IMLOG2(inumber)", "Returns the base-2 logarithm of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMPOWER", "IMPOWER(inumber, number)", "Returns a complex number raised to an integer power", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMPRODUCT", "IMPRODUCT(inumber1, inumber2,...)", "Returns the product of complex numbers", 2, "inumber"));
        engAry.add(new FormulaMetaInfo("Engineering", "IMREAL", "IMREAL(inumber)", "Returns the real coefficient of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMSIN", "IMSIN(inumber)", "Returns the sine of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMSQRT", "IMSQRT(inumber)", "Returns the square root of a complex number", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "IMSUB", "IMSUB(inumber1, inumber2)", "Returns the difference between two complex numbers", 2, "inumber"));
        engAry.add(new FormulaMetaInfo("Engineering", "IMSUM", "IMSUM(inumber1,inumber2,...)", "Returns the sum of complex numbers", 2, "inumber"));
        engAry.add(new FormulaMetaInfo("Engineering", "OCT2BIN", "OCT2BIN(number, places)", "Converts an octal number to binary", 2, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "OCT2DEC", "OCT2DEC(number)", "Converts an octal number to decimal", 1, (String)null));
        engAry.add(new FormulaMetaInfo("Engineering", "OCT2HEX", "OCT2HEX(number, places)", "Converts an octal number to hexadecimal", 2, (String)null));
    }
}
